# Include variables and stages
# from noah-pipelines-templates project 
include:
  - project: 'noah-energy/noah-pipelines-templates'
    file:    'variables.yml'
  - project: 'noah-energy/noah-pipelines-templates'
    file:    'terraform_tmpl.yml'

# Stage availables for this pipeline
stages:
  - run-security-scan 
  - infrastructure_dev
  - infrastructure_prod
  - deploy_documentation

# Runs tfsec module scan from noah-pipelines-templates project
run-security-scan:
  stage: run-security-scan
  extends: .module_security_scan
  variables:
    PATH_TO_SCAN: "modules/"
  script: 
    - echo "Starting Terraform module security scan"

# Run build infra for Dev environment
infrastructure_dev:
  stage: infrastructure_dev
  extends: .terraform
  variables:
    AWS_PROFILE_ENV: $TF_USER_DURABLE_DEV_ENV
  script:
    - cd environments/dev/
    - terraform init
    - terraform plan -var-file=dev.tfvars
    - terraform apply -var-file=dev.tfvars -auto-approve
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_REF_NAME == 'develop'

# Run build infra for Dev environment
infrastructure_prod:
  stage: infrastructure_prod
  extends: .terraform
  variables:
    AWS_PROFILE_ENV: $TF_USER_DURABLE_PROD_ENV
  script:
    - cd environments/prod/
    - terraform init
    - terraform plan -var-file=prod.tfvars
    - terraform apply -var-file=prod.tfvars -auto-approve
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

# Deploy the Terraform Documentation to GitLab pages
pages:
  stage: deploy_documentation
  extends: .deploy_pages
  script:
    - echo "Publishing Terraform documentations"
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      changes:
      - docs/* 